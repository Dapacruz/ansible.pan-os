#jinja2: lstrip_blocks: True, trim_blocks: True
Device State: {{ inventory_hostname_short | upper }}

##### show system info ##############################

{% for key, value in (system_info.stdout | from_json | json_query("response.result.system")).items() %}
{{ key }}: {{ value }}
{% endfor %}


##### show high-availability state ##############################

{{ ha_state.stdout | from_json | json_query("response.result") | to_nice_json }}


##### show interface all ##############################
#### Physical Interfaces ##############################

{% set physical_interfaces = interface_info.stdout | from_json | json_query("response.result.hw.entry") %}
{% if physical_interfaces %}
ID, Name, State, Status, Mode, Speed, Duplex, MAC, Type
{% for int in physical_interfaces %}
{{ int.get("id") }}, {{ int.get("name") }}, {{ int.get("state") }}, {{ int.get("st") }}, {{ int.get("mode") }}, {{ int.get("speed") }}, {{ int.get("duplex") }}, {{ int.get("mac") }}, {{ int.get("type") }}
{% endfor %}
{% else %}
No physical interfaces found.
{% endif %}

#### Logical Interfaces ##############################

{% set logical_interfaces = interface_info.stdout | from_json | json_query("response.result.ifnet.entry") %}
{% if logical_interfaces %}
ID, Name, IP, Addr, Addr6, Dyn, Tag, Zone, Fwd, vSys
{% for int in logical_interfaces %}
{{ int.get("id") }}, {{ int.get("name") }}, {{ int.get("ip") }}, {{ int.get("addr") }}, {{ int.get("addr6") }}, {{ int.get("dyn") }}, {{ int.get("tag") }}, {{ int.get("zone") }}, {{ int.get("fwd") }}, {{ int.get("vsys") }}
{% endfor %}
{% else %}
No logical interfaces found.
{% endif %}


##### show arp all ##############################

{% set arp_cache_entries = arp_cache.stdout | from_json | json_query("response.result.entries.entry") %}
{% if arp_cache_entries %}
IP, Mac, Status, TTL, Interface, Port
{% for entry in arp_cache_entries %}
{{ entry.get("ip") }}, {{ entry.get("mac") }}, {{ entry.get("status") }}, {{ entry.get("ttl") }}, {{ entry.get("port") }}, {{ entry.get("interface") }}
{% endfor %}
{% else %}
No ARP entries found.

{{ arp_cache.stdout | from_json | json_query("response.result") | to_nice_json }}
{% endif %}


##### show routing route ##############################

{% set route_table_entries = route_table.stdout | from_json | json_query("response.result.entry") %}
{% if route_table_entries %}
Destination, Nexthop, Interface, Metric, Age, Flags, Route-Table, Virtual-Router
{% for route in route_table_entries %}
{{ route.destination }}, {{ route.nexthop }}, {{ route.interface }}, {{ route.metric }}, {{ route.age }}, {{ route.flags }}, {{ route.get("route-table") }}, {{ route.get("virtual-router") }}
{% endfor %}
{% else %}
No route table entries found.
{% endif %}


##### show routing protocol ospf neighbors ##############################

{% set ospf_neighbor_entries = ospf_neighbors.stdout | from_json | json_query("response.result.entry") %}
{% if ospf_neighbor_entries %}

Neighbor Router ID, Neighbor Address, Status, Neighbor Priority, Area ID, Hello Suppressed, Lifetime Remain, Local Address Binding, LSA Request Pending, Messages Pending, Options, Restart Helper Exit Reason, Restart Helper Status, Restart Helper Time Remaining, Type, Virtual Router
{% for entry in ospf_neighbor_entries %}
{{ entry.get("neighbor-router-id") }}, {{ entry.get("neighbor-address") }}, {{ entry.get("status") }}, {{ entry.get("neighbor-priority") }}, {{ entry.get("area-id") }}, {{ entry.get("hello-suppressed") }}, {{ entry.get("lifetime-remain") }}, {{ entry.get("local-address-binding") }}, {{ entry.get("lsa-request-pending") }}, {{ entry.get("messages-pending") }}, {{ entry.get("options") }}, {{ entry.get("restart-helper-exit-reason") }}, {{ entry.get("restart-helper-status") }}, {{ entry.get("restart-helper-time-remaining") }}, {{ entry.get("type") }}, {{ entry.get("virtual-router") }}
{% endfor %}

{{ ospf_neighbors.stdout | from_json | json_query("response.result.options") }}
{% else %}
No OSPF neighbors found.

{{ ospf_neighbors.stdout | from_json | json_query("response.result") | to_nice_json }}
{% endif %}


##### show session info ##############################

{% for key, value in (session_info.stdout | from_json | json_query("response.result")).items() %}
{{ key }}: {{ value }}
{% endfor %}


##### show vpn flow ##############################

{% set vpn_flow_entries = vpn_flows.stdout | from_json | json_query("response.result.IPSec.entry") %}
{% if vpn_flow_entries is iterable and vpn_flow_entries is not string and vpn_flow_entries is not mapping %}
ID, Name, State, Local IP, Peer IP, Gateway ID, Inner, Outer, Monitor, Owner
{% for entry in vpn_flow_entries %}
{{ entry.get("id") }}, {{ entry.get("name") }}, {{ entry.get("state") }}, {{ entry.get("localip") }}, {{ entry.get("peerip") }}, {{ entry.get("gwid") }}, {{ entry.get("inner") }}, {{ entry.get("outer") }}, {{ entry.get("mon") }}, {{ entry.get("owner") }}
{% endfor %}
{% elif vpn_flow_entries %}
{{ vpn_flow_entries.get("id") }}, {{ vpn_flow_entries.get("name") }}, {{ vpn_flow_entries.get("state") }}, {{ vpn_flow_entries.get("localip") }}, {{ vpn_flow_entries.get("peerip") }}, {{ vpn_flow_entries.get("gwid") }}, {{ vpn_flow_entries.get("inner") }}, {{ vpn_flow_entries.get("outer") }}, {{ vpn_flow_entries.get("mon") }}, {{ vpn_flow_entries.get("owner") }}
{% else %}
No VPN flows found.

{{ vpn_flows.stdout | from_json | json_query("response.result") | to_nice_json }}
{% endif %}


##### show user user-id-agent statistics ##############################

{% set user_id_agents = user_id_agent_stats.stdout | from_json | json_query("response.result.entry") %}
{% if user_id_agents %}
Name, Connected, Host, Port, Usage, Version, vSys
{% for uid_agent in user_id_agents %}
{{ uid_agent.get("@name") }}, {{ uid_agent.get("connected") }}, {{ uid_agent.get("host") }}, {{ uid_agent.get("port") }}, {{ uid_agent.get("usage") }}, {{ uid_agent.get("ver") }}, {{ uid_agent.get("vsys") }}
{% endfor %}
{% else %}
No User-ID agents found.
{% endif %}


##### show user ts-agent statistics ##############################

{% set ts_agents = ts_agent_stats.stdout | from_json | json_query("response.result.entry") %}
{% if ts_agents %}
Name, Connected, vSys
{% for ts_agent in ts_agents %}
{{ ts_agent.get("@name") }}, {{ ts_agent.get("connected") }}, {{ ts_agent.get("vsys") }}
{% endfor %}
{% else %}
No TS agents found.
{% endif %}


##### show panorama-status ##############################

{{ panorama_status.stdout | from_json | json_query("response.result") }}


##### show logging-status ##############################

{% if ansible_net_version.startswith("10.") %}
{{ logging_status.stdout | from_json | json_query('response.result."show-logging-status"."Conn-Info"."#text"') }}
{% else %}
{{ logging_status.stdout | from_json | json_query("response.result") }}
{% endif %}