---
- name: Get Device State Snapshot
  hosts: all
  connection: local
  gather_facts: false

  pre_tasks:
    - name: Get PAN-OS Facts
      paloaltonetworks.panos.panos_facts:
        provider: "{{ provider }}"
        gather_subset: ["system"]

    - name: Get Current Date/Time
      ansible.builtin.command:
        cmd: env TZ="America/Los_Angeles" date +"%Y%m%dT%H%m%S"
      changed_when: false
      register: date_output

    - name: Set Date Fact
      ansible.builtin.set_fact:
        date: "{{ date_output.stdout }}"

    - name: Set Output Directory Fact
      ansible.builtin.set_fact:
        output_directory: "{{ playbook_dir }}/output/{{ inventory_hostname_short }}"

    - name: Set Facts
      ansible.builtin.set_fact:
        device_state_snapshot_main: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_{{ date }}.txt"
        device_state_snapshot_system_info: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_system_info_{{ date }}.csv"
        device_state_snapshot_ha_state: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_ha_state_{{ date }}.csv"
        device_state_snapshot_routes: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_route_table_{{ date }}.csv"
        device_state_snapshot_ospf_neighbors: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_ospf_neighbors_{{ date }}.csv"
        device_state_snapshot_session_info: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_session_info_{{ date }}.csv"
        device_state_snapshot_interfaces_hardware: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_interfaces_hardware_{{ date }}.csv"
        device_state_snapshot_interfaces_logical: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_interfaces_logical_{{ date }}.csv"
        device_state_snapshot_arp_cache: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_arp_cache_{{ date }}.csv"
        device_state_snapshot_userid_agents: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_userid_agents_{{ date }}.csv"
        device_state_snapshot_ts_agents: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_ts_agents_{{ date }}.csv"
        device_state_snapshot_panorama_status: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_panorama_status_{{ date }}.csv"
        device_state_snapshot_logging_status: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_logging_status_{{ date }}.csv"
        device_state_snapshot_vpn_flows: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_vpn_flows_{{ date }}.csv"
        device_state_cfg: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_cfg_{{ date }}.tgz"

    - name: Ensure Output Directory Exists
      ansible.builtin.file:
        state: directory
        path: "{{ output_directory }}"
      delegate_to: localhost
      run_once: true

  tasks:
    - name: Save Configuration Snapshot
      paloaltonetworks.panos.panos_op:
        provider: "{{ provider }}"
        cmd: save config to preflight_{{ date }}.xml
      delegate_to: localhost
      when: save_config_snapshot | bool

    - name: Export Device State
      paloaltonetworks.panos.panos_export:
        provider: "{{ provider }}"
        category: device-state
        filename: "{{ device_state_cfg }}"
      delegate_to: localhost
      when: save_config_snapshot | bool

    - name: show system info
      paloaltonetworks.panos.panos_op:
        provider: "{{ provider }}"
        cmd: show system info
      delegate_to: localhost
      register: system_info

    - name: show high-availability state
      paloaltonetworks.panos.panos_op:
        provider: "{{ provider }}"
        cmd: show high-availability state
      delegate_to: localhost
      register: ha_state

    - name: show interface all
      paloaltonetworks.panos.panos_op:
        provider: "{{ provider }}"
        cmd: <show><interface>all</interface></show>
        cmd_is_xml: true
      delegate_to: localhost
      register: interface_info

    - name: show arp all
      paloaltonetworks.panos.panos_op:
        provider: "{{ provider }}"
        cmd: <show><arp><entry name = 'all'/></arp></show>
        cmd_is_xml: true
      delegate_to: localhost
      register: arp_cache

    - name: show routing route
      paloaltonetworks.panos.panos_op:
        provider: "{{ provider }}"
        cmd: show routing route
      delegate_to: localhost
      register: route_table

    - name: show routing protocol ospf neighbor
      paloaltonetworks.panos.panos_op:
        provider: "{{ provider }}"
        cmd: show routing protocol ospf neighbor
      delegate_to: localhost
      register: ospf_neighbors

    - name: show session info
      paloaltonetworks.panos.panos_op:
        provider: "{{ provider }}"
        cmd: show session info
      delegate_to: localhost
      register: session_info

    - name: show vpn flow
      paloaltonetworks.panos.panos_op:
        provider: "{{ provider }}"
        cmd: show vpn flow
      delegate_to: localhost
      register: vpn_flows

    - name: show user user-id-agent statistics
      paloaltonetworks.panos.panos_op:
        provider: "{{ provider }}"
        cmd: show user user-id-agent statistics
      delegate_to: localhost
      register: user_id_agent_stats

    - name: show user ts-agent statistics
      paloaltonetworks.panos.panos_op:
        provider: "{{ provider }}"
        cmd: show user ts-agent statistics
      delegate_to: localhost
      register: ts_agent_stats

    - name: show panorama-status
      paloaltonetworks.panos.panos_op:
        provider: "{{ provider }}"
        cmd: show panorama-status
      delegate_to: localhost
      register: panorama_status

    - name: show logging-status
      paloaltonetworks.panos.panos_op:
        provider: "{{ provider }}"
        cmd: show logging-status
      delegate_to: localhost
      register: logging_status

  post_tasks:
    - name: Render Main Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/main.j2
        dest: "{{ device_state_snapshot_main }}"
      delegate_to: localhost

    - name: Render System Info Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/system_info.j2
        dest: "{{ device_state_snapshot_system_info }}"
      delegate_to: localhost

    - name: Render High Availability Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/ha_state.j2
        dest: "{{ device_state_snapshot_ha_state }}"
      delegate_to: localhost

    - name: Render Route Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/routes.j2
        dest: "{{ device_state_snapshot_routes }}"
      delegate_to: localhost

    - name: Render OSPF Neighbor Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/ospf_neighbors.j2
        dest: "{{ device_state_snapshot_ospf_neighbors }}"
      delegate_to: localhost

    - name: Render Session Info Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/session_info.j2
        dest: "{{ device_state_snapshot_session_info }}"
      delegate_to: localhost

    - name: Render Hardware Interface Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/interfaces_hardware.j2
        dest: "{{ device_state_snapshot_interfaces_hardware }}"
      delegate_to: localhost

    - name: Render Logical Interface Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/interfaces_logical.j2
        dest: "{{ device_state_snapshot_interfaces_logical }}"
      delegate_to: localhost

    - name: Render ARP Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/arp_cache.j2
        dest: "{{ device_state_snapshot_arp_cache }}"
      delegate_to: localhost

    - name: Render TS Agent Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/ts_agents.j2
        dest: "{{ device_state_snapshot_ts_agents }}"
      delegate_to: localhost

    - name: Render Panorama Status Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/panorama_status.j2
        dest: "{{ device_state_snapshot_panorama_status }}"
      delegate_to: localhost

    - name: Render Logging Status Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/logging_status.j2
        dest: "{{ device_state_snapshot_logging_status }}"
      delegate_to: localhost

    - name: Render User-ID Agent Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/userid_agents.j2
        dest: "{{ device_state_snapshot_userid_agents }}"
      delegate_to: localhost

    - name: Render VPN Flow Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/vpn_flow.j2
        dest: "{{ device_state_snapshot_vpn_flows }}"
      delegate_to: localhost

    - name: Merge CSV Files into an Excel Workbook
      command: /usr/bin/python3
      args:
        stdin: |
          from pathlib import Path
          import pandas as pd

          p = Path("{{ output_directory }}")
          with pd.ExcelWriter("{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_{{ date }}.xlsx", engine="xlsxwriter") as writer:
              wb = writer.book
              cell_format = wb.add_format()
              cell_format.set_font_name("Consolas")
              for f in sorted(p.glob("*.csv")):
                  df = pd.read_csv(f)
                  sheet_name = str(f).replace("{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_", "").replace("_{{ date }}.csv", "")
                  df.to_excel(writer, sheet_name=sheet_name, index=False)
                  worksheet = writer.sheets[sheet_name]
                  # Get the dimensions of the dataframe
                  (max_row, max_col) = df.shape
                  # Get column headers
                  column_settings = [{"header": column} for column in df.columns]
                  # Add Excel table
                  worksheet.add_table(0, 0, max_row, max_col - 1, {"columns": column_settings, "style": "Table Style Medium 2"})
                  # Resize columns for better readability
                  for idx, col in enumerate(df):
                      series = df[col]
                      max_len = max((series.astype(str).map(len).max(),len(str(series.name)))) + 3
                      worksheet.set_column(idx, idx, max_len, cell_format)

    - name: Find Files to Attach
      ansible.builtin.find:
        paths: "{{ output_directory }}"
        patterns:
          - "*.xlsx"
          - "*.txt"
          - "*.tgz"
      register: files

    - name: Mail Report
      community.general.mail:
        host: "{{ smtp_server }}"
        port: "{{ smtp_port }}"
        subject: "{{ inventory_hostname_short | upper }} Device State Snapshot"
        body: Attached please find the device state snapshot files for {{ inventory_hostname_short | upper }}.
        from: "{{ smtp_from }}"
        to:
          - "{{ smtp_to }}"
        attach: "{{ files.files | json_query('[].path') }}"
      ignore_errors: true
      delegate_to: localhost
